{"version":3,"sources":["../../src/server.js"],"names":["Socket","start","port","fixturesDirectory","server","use","json","limit","extended","urlencoded","static","join","__dirname","delete","post","get","listen","console","log","green","init","socketPort"],"mappings":";;;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;AACA;;AAKA;;AACA;;;;AACA;;;;AACA;;AACA;;IAAYA,M;;AACZ;;;;AACA;;;;AACA;;;;;;;;;;AAEO,IAAMC;AAAA,qEAAQ,iBAAOC,IAAP,EAAaC,iBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAEbC,kBAFa,GAEJ,wBAFI;;AAInB;;AACAA,mBAAOC,GAAP,CAAW,qBAAX;AACAD,mBAAOC,GAAP,CAAW,qBAAWC,IAAX,CAAgB,EAACC,OAAO,OAAR,EAAiBC,UAAU,IAA3B,EAAhB,CAAX;AACAJ,mBAAOC,GAAP,CAAW,qBAAWI,UAAX,CAAsB,EAACF,OAAO,OAAR,EAAiBC,UAAU,IAA3B,EAAtB,CAAX;;AAEA;AACAJ,mBAAOC,GAAP,CAAW,kBAAQK,MAAR,CAAe,eAAKC,IAAL,CAAUC,YAAY,wBAAtB,CAAf,CAAX;;AAEA;AACAR,mBAAOS,MAAP,CAAc,WAAd;AACAT,mBAAOU,IAAP,CAAY,WAAZ;AACAV,mBAAOU,IAAP,CAAY,sBAAZ;AACAV,mBAAOU,IAAP,CAAY,gBAAZ;;AAEAV,mBAAOW,GAAP,CAAW,WAAX;;AAEAX,mBAAOU,IAAP,CAAY,6BAAZ;AACAV,mBAAOS,MAAP,CAAc,QAAd;;AAEAT,mBAAOW,GAAP,CAAW,WAAX;;AAEAX,mBAAOY,MAAP,CAAcd,IAAd,EAAoB;AAAA,qBAAMe,QAAQC,GAAR,CAAY,gBAAMC,KAAN,mEAA4EjB,IAA5E,OAAZ,CAAN;AAAA,aAApB;;AAEA;AA3BmB;AAAA,mBA4BMF,OAAOoB,IAAP,EA5BN;;AAAA;AA4BbC,sBA5Ba;;;AA8BnBJ,oBAAQC,GAAR,6BAAsCG,UAAtC;;AAEA,iCAAS,EAAEnB,UAAF,EAAQmB,sBAAR,EAAoBlB,oCAApB,EAAT;;AAEA;AACAc,oBAAQC,GAAR;AACA,qDAAwBhB,IAAxB;;AApCmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAR;;AAAA;AAAA;AAAA;AAAA,GAAN","file":"server.js","sourcesContent":["import 'babel-polyfill';\nimport express from 'express';\nimport bodyParser from 'body-parser';\nimport chalk from 'chalk';\nimport {\n  handleRequest,\n  resetRequestsHandler,\n  saveRequestsHandler\n} from './handlers/requests';\nimport { startDebuggingRequest, stopDebuggingRequest } from './handlers/debugHandler';\nimport settingsHandler from './handlers/settings';\nimport profilesHandler from './handlers/profiles';\nimport { setState } from './services/state';\nimport * as Socket from './services/socket';\nimport opn from 'opn';\nimport cors from 'cors';\nimport path from 'path';\n\nexport const start = async (port, fixturesDirectory) => {\n\n  const server = express();\n\n  // Middleware\n  server.use(cors());\n  server.use(bodyParser.json({limit: '100mb', extended: true}));\n  server.use(bodyParser.urlencoded({limit: '100mb', extended: true}));\n\n  // Console\n  server.use(express.static(path.join(__dirname + '../../../console/build')));\n\n  // Routes\n  server.delete('/requests', resetRequestsHandler);\n  server.post('/requests', handleRequest);\n  server.post('/requests/type/:type', handleRequest);\n  server.post('/requests/save', saveRequestsHandler);\n\n  server.get('/settings', settingsHandler);\n\n  server.post('/debug/profile/:profileName', startDebuggingRequest);\n  server.delete('/debug', stopDebuggingRequest);\n\n  server.get('/profiles', profilesHandler);\n\n  server.listen(port, () => console.log(chalk.green(`Tundra server started. Console available at http://localhost:${port}.`)));\n\n  // Websocket Server\n  const socketPort = await Socket.init();\n\n  console.log(`Socket started on port ${socketPort}. Waiting for client to join...`);\n\n  setState({ port, socketPort, fixturesDirectory });\n\n  // Launch Console\n  console.log(`Launching console...`);\n  opn(`http://localhost:${port}`);\n};\n\n\n"]}